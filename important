
============================================================
=================== RUN HASKELL IN SHELL ===================
============================================================

ghci -- opens haskell interface
:set prompt "ghci> " -- change from Prelude> to ghci>
Difference bitween them:
	http://stackoverflow.com/questions/35167627/ghci-vs-prelude-command-prompt-in-haskell
if we complie while using Prelude> we get a new promp *Main> while if we compile using
	ghci> we return to ghci> but we added the code!
using the "let" keyword (aka let a = 1) defins a name right in GHCI just like if 
	loading a code with the line a = 1

:load -- load script name 
:relode -- reload current script 
:set -- set editor to name
:edit -- edit script name
:edit -- edit current script
:type -- show type of expr
:?  -- show all commands
:quit -- quit GHCi

============================================================
========================= COMPILE ==========================
============================================================

save as .hs
enter -- ghci
enter -- :l baby

============================================================
====================== ALL FUNCTIONS =======================
============================================================

/=, ++, :, !!, <=, >=, NULL, ELEM, =>, succ, head, tail,
last, init, length, reverce, take, drop, maximum, minimum,
sum, product, cycle, repeat, replicate, odd, zip, compare,
show, read, pred, fromIntegral, error

============================================================
======================== FUNCTIONS =========================
============================================================

----------------------------------------------------------
/= -- not equal											   ****************
++ -- appends two lists together
: -- appends an element to a list from the left
!! -- infix func to get an element from list by index	   ****************
	But may get an error for "sigmentation fault"
null -- check if a list is empty. do not use xs == []	   ****************
elem -- checks weather an element is of the type in a list **************** 
_ -- element we dont care about
=> -- defines the typeclass of a type variable
----------------------------------------------------------

take -- takes n numers of list from the left
drop -- returns length-n numers of list from the right
cycle -- takes a list and cycles it into an infinite list
repeat -- takes an element and produces an infinite list 
replicate -- like "take n (repeat m)" but not infinate
zip -- create kist of pair tuples from two diffrent lists 
error -- takes a String and generates a runtime error      **************** 
============================================================
========================== LISTS ===========================
============================================================

----------------------------------------------------------
[1..20] -- syntactic sugar for [1,2,3,...,20] works with
	chars a s well.
	[3,6..20] -- yeals [3,6,9,12,15,18]
	you cant do [20..1]. you have to do [20,19..1]
[13,26..] -- define an infenet list
[x*2 | x <- [1..10]] -- list comprehension
(x:xs) -- when we bind variables like this, they must be 
	surrounded by () 
----------------------------------------------------------

============================================================
========================== TUPLES ==========================
============================================================

----------------------------------------------------------
("One",2) -- tuple
	[(1,2),("One",2)] -- tuple of 2 inside list
----------------------------------------------------------
 
fst -- takes a PAIR and returns the first
snd -- takes a PAIR and returns the second

============================================================
========================== TYPES ===========================
============================================================

----------------------------------------------------------
e::t -- if e generates an element of type t, then e 
	HAS TYPE t. (to check type of infix funcs sorround by 
	() like :t (==))
:type -- show type of expr
:t -- like :type
Integer -- is like Int but not bounded by 32 bit
type variable -- a. since it is lower case
polymorphic functions -- functions that have type varaibles ****************
typeclass -- groops of types
class constraint -- what comes before => in type 
	declaration
type inference -- set explicitly the type of a function
explicit type annotations -- explicitly asking for a type
	in return. syntax - read "5" :: Int
----------------------------------------------------------

typeclass:

Eq -- equality typeclass
Ord -- typeclass of elements that can be compared. an 
	element can be either Eq, GT or LT
GT -- grater typeclass
LT -- lesser typeclass
Show -- typeclass of elements that can be represented as
	strings
Enum -- typeclass of sequentially ordered types. types in
	this class are (), Bool, Char, Ordering, Int, Integer,
	Float and Double.
Bounded -- contains members with both upper and lower bound
minBound -- 
maxBound -- 
Num -- numeric typeclass. a member has to be also in Show 
	and Eq
Integral -- like Num but has only whole numbers
Floating -- includes only Double and Float 

unique functions of typeclass: 

compare -- gets two Ord member and returns an Ord
show -- gets a member of Show and returns a String
read -- gets a String and returns a Show. READ IS ACTUALLY   ****************
	CASTING FROM STRING TO ITS TYPE! BEAUTIFUL HOW IT WORKS
fromIntegral -- takes an Integral and returns a Num

============================================================
========================== SYNTAX ==========================
============================================================

pattern matching -- its basicaly overiding functions in c. it 
	will be overidden from top to bottom
non-exhaustive patterns -- error denoting that thefunction 
	did not cover the posibility of getting an item in its
	pattern maching


============================================================
========================= GENERAL ==========================
============================================================

------------------------------------------------------------
92 `div` 10 -- make infix function act like prefix functions ****************
syntactic sugar -- means an easier way to do somthing
singleton list -- list with only one element
cons operator -- the ":" operator the append an ELEMENT to a 
	list from the left. Thats the true way a list is defined
Comparing between lists is elemnt wise from the left
list comprehension -- building a list out of rules			 ****************
------------------------------------------------------------

functions can't begin with uppercase letters
infix function (+) and prefix functions (normal funcs)
spaces are used for function application in Haskell
	func2 (func1 3) means func2(func1(3))
if statments are exprecions meaning they have to yield aresult.
	Thats why the else part is mandatory 
definition -- func that dosent take parameters
: takes O(1) but ++ takes O(N)
Empty lists [] are dengreous
predicates -- all that comes after the | in a list 
	comprehension expresion
filtering -- arguments that yealds ommiting elements in a list 
	comprehension predicates
polymorphic constants -- when a typeclass is defined and yet
	does not have a unique type signature 